#include "ref.jazz"

param int rate = 1088;
param int capacity = 512;
param int rateInBytes = 1088 / 8;

inline
fn initialize(stack u64[25] state) -> stack u64[25] {
  reg u64 zero;
  inline int i;
  _, _, _, _, _, zero = #set0();
  for i = 0 to 25 { state[i] = zero; }
  return state;
}

inline
fn addBlock(stack u64[25] state, reg u64 data) -> stack u64[25] {
  reg u64 t;
  inline int i;
  for i = 0 to rateInBytes / 8 {
    t = [data + 8 * i];
    state[i] ^= t;
  }
  return state;
}

inline
fn extractBlock(stack u64[25] state, reg u64 out) {
  reg u64 t;
  inline int i;
  for i = 0 to rateInBytes / 8 {
    t = state[i];
    [out + 8 * i] = t;
  }
}

export
fn sponge(
  reg u64 input,
  reg u64 inputByteLen,
  reg u64 output,
  reg u64 outputByteLen
) -> reg u64 {
  reg u64 r;
  stack u64[25] state;
  stack u64[24] constants;
  constants = keccakRoundConstants();
  state = initialize(state);

  while (inputByteLen >= rateInBytes) {
    state = addBlock(state, input);
    state = permute(state, constants);
    input += rateInBytes;
    inputByteLen -= rateInBytes;
  }

  // TODO: absorb partial block
  // TODO: padding

  while (outputByteLen > rateInBytes) {
    extractBlock(state, output);
    permute(state, constants);
    output += rateInBytes;
    outputByteLen -= rateInBytes;
  }

  // TODO: extract partial block

  _, _, _, _, _, r = #set0();
  return r;
}
