/* ---------------------------------------------------------------- */
inline
fn perm4u64(reg u256 x, inline int c) -> reg u256 {
  reg u256 r;
  r = #x86_VPERMQ(x, c);
  return r;
}

inline
fn perm2u128(reg u256 x, reg u256 y, inline int c) -> reg u256 {
  reg u256 r;
  r = #x86_VPERM2I128(x, y, c);
  return r;
}

/* ---------------------------------------------------------------- */
inline
fn R4(inline int c, reg u256 x) -> reg u256 {
inline int d;
reg u256 a, b, r;
global u256 cr, dr;
cr = c;
a = #x86_VPSLLV_4u64(x, cr);
d = (4u64)[64, 64, 64, 64] - c;
dr = d;
b = #x86_VPSRLV_4u64(x, dr);
r = a ^ b;
return r;
}

/* ---------------------------------------------------------------- */
inline
fn PP01(reg u256 x, reg u256 y) -> reg u256, reg u256 {
  reg u256 a, b;
  a = perm4u64(x, 0xb1);
  b = perm4u64(y, 0xb1);
  return a, b;
}

inline
fn PP45_1(reg u256 x, reg u256 y) -> reg u256, reg u256 {
  reg u256 a, b, c, d;
  c = perm4u64(x, 0x6c);
  d = perm4u64(y, 0x6c);
  a = perm2u128(c, d, 0x30);
  b = perm2u128(c, d, 0x12);
  return a, b;
}

inline
fn PP45_2(reg u256 x, reg u256 y) -> reg u256, reg u256 {
  reg u256 a, b;
  a = perm4u64(x, 0xc6);
  b = perm4u64(y, 0xc6);
  return a, b;
}

/* ---------------------------------------------------------------- */
fn bashPP(reg u256[6] w) -> reg u256, reg u256, reg u256, reg u256, reg u256, reg u256 {
  reg u256 a, b, c, d, e, f, g, h, i, j;
  g, h = PP45_1(w[4], w[5]);
  e, f = PP01(w[0], w[1]);
  a = w[2];
  b = w[3];
  c, d = PP45_2(g, h);
  return a, b, c, d, e, f;
}

fn bashP0(reg u256[6] w) -> reg u256[6] {
  w[0], w[1], w[2], w[3], w[4], w[5] = bashPP(w);
  return w;
}

fn bashP1(reg u256[6] w) -> reg u256[6] {
  w[0], w[1], w[3], w[2], w[5], w[4] = bashPP(w);
  return w;
}

/* ---------------------------------------------------------------- */
fn bashSP(inline int kind,
inline int m1, inline int n1, inline int m2, inline int n2,
reg u256 x, reg u256 y, reg u256 z
) -> reg u256, reg u256, reg u256 {
  reg u256 a, b, c;
  reg u256 s1, s2, t0, t1, t2, u0, u1, u2;
  reg u256 j, k, l;

  s2 = R4(m1, x);

  j = y ^ z;
  u0 = x ^ j;

  j = R4(n1, u0);
  s1 = y ^ j;

  j = R4(n2, s1);
  k = R4(m2, z);
  l = z ^ k;
  u2 = l ^ j;

  u1 = s1 ^ s2;

  if kind == 0 {
    /* bashSS0 */
    t1 = u0 | u2;
    t2 = u0 & u1;
    t0 = !u1 & u2;
  } else {
    /* bashSS1 */
    t1 = u0 & u2;
    t2 = u0 | u1;
    t0 = !u2 & u1;
  }

  b = u1 ^ t1;
  c = u2 ^ t2;
  a = u0 ^ t0;

  return a, b, c;
}

/* ---------------------------------------------------------------- */
fn xor64(reg u256 x, inline int i, inline u64 c) -> reg u256 {
  reg u128 y;
  reg u64 r;
  y = #x86_VEXTRACTI128(x, i / 2);
  r = #x86_VPEXTR_64(y, i % 2);
  r ^= c;
  y = #x86_VPINSR_2u64(y, r, i % 2);
  x = #x86_VINSERTI128(x, y, i / 2);
  return x;
}

/* ---------------------------------------------------------------- */
fn seq(inline int u0, inline int n) -> inline int {
  inline int u, i;
  u = u0;
  for i = 0 to n {
    u = (7 * u) % 64;
  }
  return u;
}

/* ---------------------------------------------------------------- */
fn combine(inline int base, inline int a, inline int b, inline int c, inline int d) -> inline int {
  inline int z, t1, t2, t3, t4;
  t1 = seq(base, d);
  t2 = seq(base, c);
  t3 = seq(base, b);
  t4 = seq(base, a);
  z = (4u64)[t1, t2, t3, t4];
  return z;
}

/* ---------------------------------------------------------------- */
fn bashR(inline int kind, reg u256[6] w, inline u64 c) -> reg u256[6] {
  inline int m1, m2, n1, n2;
  inline int p1, p2, p3, p4;
  reg u256 x, y, z;
  m1 = 8;
  n1 = 53;
  m2 = 14;
  n2 = 1;

  if kind == 0 {
    p1 = combine(m1, 0, 1, 2, 3);
    p2 = combine(n1, 0, 1, 2, 3);
    p3 = combine(m2, 0, 1, 2, 3);
    p4 = combine(n2, 0, 1, 2, 3);
    x, y, z = bashSP(0, p1, p2, p3, p4, w[0], w[2], w[4]);
    w[0] = x; w[2] = y; w[4] = z;
    p1 = combine(m1, 4, 5, 6, 7);
    p2 = combine(n1, 4, 5, 6, 7);
    p3 = combine(m2, 4, 5, 6, 7);
    p4 = combine(n2, 4, 5, 6, 7);
    x, y, z = bashSP(0, p1, p2, p3, p4, w[1], w[3], w[5]);
    w[1] = x; w[3] = y; w[5] = z;
    w = bashP0(w);
    w[4] = xor64(w[4], 0, c);
  } else {
    p1 = combine(m1, 7, 2, 1, 4);
    p2 = combine(n1, 7, 2, 1, 4);
    p3 = combine(m2, 7, 2, 1, 4);
    p4 = combine(n2, 7, 2, 1, 4);
    x, y, z = bashSP(1, p1, p2, p3, p4, w[0], w[2], w[4]);
    w[0] = x; w[2] = y; w[4] = z;
    p1 = combine(m1, 3, 6, 5, 0);
    p2 = combine(n1, 3, 6, 5, 0);
    p3 = combine(m2, 3, 6, 5, 0);
    p4 = combine(n2, 3, 6, 5, 0);
    x, y, z = bashSP(1, p1, p2, p3, p4, w[1], w[3], w[5]);
    w[1] = x; w[3] = y; w[5] = z;
    w = bashP1(w);
    w[5] = xor64(w[5], 3, c);
  }
  return w;
}

/* ---------------------------------------------------------------- */
fn nextC(inline u64 c) -> inline u64 {
inline u64 p;
  p = c & 1;
  c >>= 1;
  if p == 1 {
    c ^= 0xDC2BE1997FE0D8AE;
  }
  return c;
}

/* ---------------------------------------------------------------- */
fn bashFP(reg u256[6] w) -> reg u256[6] {
inline u64 c;
inline int round;

  c = 0x3BF5080AC8BA94B1;

  for round = 0 to 12 {
    w = bashR(0, w, c);
    c = nextC(c);
    w = bashR(1, w, c);
    c = nextC(c);
  }

  return w;
}

/* ---------------------------------------------------------------- */
/*
u256 ceP = 0x18191a1b1c1d1e1f101112131415161708090a0b0c0d0e0f0001020304050607;
*/

inline
fn ce(reg u256 x) -> reg u256 {
  /*x = #x86_VPSHUFB_256(x, ceP);*/
  return x;
}

/* ---------------------------------------------------------------- */
export
fn bashF0(reg u64 ptr) {
  reg u256[6] w;
  reg u256 t;
  inline int i;

  for i = 0 to 6 {
    t = (u256)[ptr + 32 * i];
    w[i] = ce(t);
  }

  w = bashFP(w);

  for i = 0 to 6 {
    t = w[i];
    t = ce(t);
    (u256)[ptr + 32 * i] = t;
  }

}
