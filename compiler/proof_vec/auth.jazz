param int mask26 = 0x3ffffff;
param int bit25 = 0x1000000;

// x += y;
fn add(reg u64[5] x, reg u64[5] y) -> reg u64[5]
{
  inline int i;
  for i=0 to 5 { x[i] += y[i]; }
  return x;
}

// x += y; with simple carry propagation
fn add_carry(reg u64[5] x, reg u64[5] y) -> reg u64[5]
{
  inline int i;
  reg u64 c;

  x[0] += y[0];  

  for i=0 to 4
  { c = x[i]; c >>= 26;
    x[i] &= mask26;
    x[i+1] += y[i+1];
    x[i+1] += c;
  }

  return x;
}

fn carry_reduce(reg u64[5] x) -> reg u64[5]
{
  reg u64[2] z;

  z[0] = x[0]; z[0] >>= 26;
  z[1] = x[3]; z[1] >>= 26;
  x[0] &= mask26;
  x[3] &= mask26;
  x[1] += z[0];
  x[4] += z[1];

  z[0] = x[1]; z[0] >>= 26;
  z[1] = x[4]; z[1] >>= 26;
  z[1] *= 5;
  x[1] &= mask26;
  x[4] &= mask26;
  x[2] += z[0];
  x[0] += z[1];

  z[0] = x[2]; z[0] >>= 26;
  z[1] = x[0]; z[1] >>= 26;
  x[2] &= mask26;
  x[0] &= mask26;
  x[3] += z[0];
  x[1] += z[1];

  z[0] = x[3]; z[0] >>= 26;
  x[3] &= mask26;
  x[4] += z[0];

  return x;
}

fn freeze(reg u64[5] x) -> reg u64[5]
{
  inline int i;
  reg u64[5] ox;
  reg u64 n, c;

  // partial reduction
  n = x[4]; n >>= 26;
  c = n; c <<= 2; c += n; // c = n * 5;
  x[0] += c;

  // copy x to ox
  ox = x;

  // inlined add carry with {5, 0, 0, 0, 0}
  x[0] += 5;
  c = x[0];
  x[0] &= mask26;
  c >>= 26;

  for i=1 to 5
  { x[i] += c;
    c = x[i];
    x[i] &= mask26; // last bit is also cleared...
    c >>= 26;
  }

  // if last bit is set then (1-1) => 0x0000... else (0-1) => 0xffff...
  c &= 1; c -= 1;

  for i=0 to 5
  { ox[i] ^= x[i]; }

  for i=0 to 5
  { ox[i] &= c; }

  // if last bit == 0 then x ^= (ox ^ x) ==> ox is returned
  // else                  x ^= 0        ==> ox+5 is returned
  for i=0 to 5
  { x[i] ^= ox[i]; }

  // if ox is returned: carry propagation performed by last add_carry with S
  return x;
}

// m -> points to [m1, m0]
fn unpack(reg u64 m) -> reg u64[5]
{
  reg u64 t, m0, m1;
  reg u64[5] x;

  m0 = [m + 8*0];
  m1 = [m + 8*1];

  x[0] = m0;
  x[0] &= mask26;
  m0 >>= 26;

  x[1] = m0;
  x[1] &= mask26;
  m0 >>= 26; // 12 bits left in m0

  x[2] = m0; // we still need 14 bits from m1
  t = m1; t <<= 12;
  x[2] |= t;
  x[2] &= mask26;
  m1 >>= 14;

  x[3] = m1;
  x[3] &= mask26;
  m1 >>= 26;

  x[4] = m1; // 24 bits in x[4]

  return x;
}

// requires 12 registers (x[0] is dead before z appears)
fn mulmod(reg u64[5] x, reg u64[5] y, reg u64[4] yx5) -> reg u64[5]
{
  reg u64[5] t;
  reg u64[3] z;

  // *y
  t[0] = x[0]; t[0] *= y[0]; // x0*y0*2^0 -- t0
  t[1] = x[0]; t[1] *= y[1]; // x0*y1*2^26
  t[2] = x[0]; t[2] *= y[2]; // x0*y2*2^52
  t[3] = x[0]; t[3] *= y[3]; // x0*y3*2^78
  t[4] = x[0]; t[4] *= y[4]; // x0*y4*2^104

  z[0] = x[1]; z[0] *= y[0]; // x1*y0*2^26
  z[1] = x[1]; z[1] *= y[1]; // x1*y1*2^52
  z[2] = x[1]; z[2] *= y[2]; // x1*y2*2^78

  t[1] += z[0]; //  x0*y1*2^26  + x1*y0*2^26 -- t1
  t[2] += z[1]; //  x0*y2*2^52  + x1*y1*2^52
  t[3] += z[2]; //  x0*y3*2^78  + x1*y2*2^78

  z[0] = x[1]; z[0] *= y[3]; // x1*y3*2^104
  z[1] = x[2]; z[1] *= y[0]; // x2*y0*2^52
  z[2] = x[2]; z[2] *= y[1]; // x2*y1*2^78

  t[4] += z[0]; //  x0*y4*2^104 + x1*y3*2^104
  t[2] += z[1]; // (x0*y2*2^52  + x1*y1*2^52 ) + x2*y0*2^52 -- t2
  t[3] += z[2]; // (x0*y3*2^78  + x1*y2*2^78)  + x2*y1*2^78

  z[0] = x[2]; z[0] *= y[2]; // x2*y2*2^104
  z[1] = x[3]; z[1] *= y[0]; // x3*y0*2^78
  z[2] = x[3]; z[2] *= y[1]; // x3*y1*2^104

  t[4] += z[0]; // (x0*y4*2^104 + x1*y3*2^104) + x2*y2*2^104
    z[0] = x[4]; z[0] *= y[0]; // x4*y0*2^104
  t[3] += z[1]; // ((x0*y3*2^78  + x1*y2*2^78)  + x2*y1*2^78)  + x3*y0*2^78 -- t3
  t[4] += z[2]; // ((x0*y4*2^104 + x1*y3*2^104) + x2*y2*2^104) + x3*y1*2^104

  t[4] += z[0]; // (((x0*y4*2^104 + x1*y3*2^104) + x2*y2*2^104) + x3*y1*2^104) + x4*y0*2^104 -- t4

  // *y*5
  z[0] = x[4]; z[0] *= yx5[0]; // x4*y1*2^0 * 5
  z[1] = x[3]; z[1] *= yx5[1]; // x3*y2*2^0 * 5
  z[2] = x[4]; z[2] *= yx5[1]; // x4*y2*2^26 * 5

  t[0] += z[0]; // t0 + x4*y1*2^0 * 5
  t[0] += z[1]; // (t0 + x4*y1*2^0 * 5) + x3*y2*2^0 * 5
  t[1] += z[2]; // t1 + x4*y2*2^26 * 5

  z[0] = x[4]; z[0] *= yx5[2]; // x4*y3*2^52 * 5
  z[1] = x[2]; z[1] *= yx5[2]; // x2*y3*2^0 * 5
  z[2] = x[3]; z[2] *= yx5[2]; // x3*y3*2^26 * 5

  t[2] += z[0]; //    t2 + x4*y3*2^52 * 5        
  t[0] += z[1]; // ((t0 + x4*y1*2^0 * 5) + x3*y2*2^0 * 5) + x2*y3*2^0 * 5
  t[1] += z[2]; // (t1 + x4*y2*2^26 * 5) + x3*y3*2^26 * 5

  z[0] = x[1]; z[0] *= yx5[3]; // x1*y4*2^0 * 5
  z[1] = x[2]; z[1] *= yx5[3]; // x2*y4*2^26 * 5
  z[2] = x[3]; z[2] *= yx5[3]; // x3*y4*2^52 * 5

  // 

  x[0] = t[0]; x[0] += z[0];     // (((t0 + x4*y1*2^0  * 5) + x3*y2*2^0  * 5) + x2*y3*2^0  * 5) + x1*y4*2^0 * 5 -- t0
    z[0] = x[4]; z[0] *= yx5[3]; // x4*y4*2^78 * 5
  x[1] = t[1]; x[1] += z[1];     //  ((t1 + x4*y2*2^26 * 5) + x3*y3*2^26 * 5) + x2*y4*2^26 * 5 -- t1
  x[2] = t[2]; x[2] += z[2];     //   (t2 + x4*y3*2^52 * 5) + x3*y4*2^52 * 5 -- t2

  x[3] = t[3]; x[3] += z[0];     //    t3 + x4*y4*2^78 * 5 -- t3
  x[4] = t[4];

  return x;
}

fn clamp(reg u64 k) -> reg u64[5]
{
  reg u64[5] r;
  r = unpack(k);
  r[0] &= 0x3ffffff;
  r[1] &= 0x3ffff03;
  r[2] &= 0x3ffc0ff;
  r[3] &= 0x3f03fff;
  r[4] &= 0x00fffff;
  return r;
}

fn load(reg u64 in) -> reg u64[5]
{
  reg u64[5] x;
  x = unpack(in);
  x[4] |= bit25;
  return x;
}

fn load_last(reg u64 in, reg u64 inlen) -> reg u64[5]
{
  inline int i;
  reg u64[2] m;
  reg u64[5] x;
  reg u64 x0, b, c, n, t;

  for i=0 to 2 { m[i] = 0; } 

  if(inlen < 8)
  { // load 7 or less bytes
    c = 0; n = 0;
    while(c < inlen)
    { t = (64u)(u8)[in + c];
      t <<= n;
      m[0] |= t;
      n += 8; c += 1;
    }
    t = 0x1; t <<= n;
    m[0] |= t;
  }
  else
  { // load 8 bytes to the first limb 
    m[0] = [in + 0];
    // load inlen - 8 bytes (= [0..7]) to the second limb
    inlen -= 8; in += 8;
    c = 0; n = 0;
    while(c < inlen)
    { t = (64u)(u8)[in + c];
      t <<= n;
      m[1] |= t;
      n += 8; c += 1;
    }
    t = 0x1; t <<= n;
    m[1] |= t;
  }

  // unpack

  x[0] = m[0];
  x[0] &= mask26;
  m[0] >>= 26;

  x[1] = m[0];
  x[1] &= mask26;
  m[0] >>= 26; // 12 bits left in m0

  x[2] = m[0]; // we still need 14 bits from m1
  t = m[1]; t <<= 12;
  x[2] |= t;
  x[2] &= mask26;
  m[1] >>= 14;

  x[3] = m[1];
  x[3] &= mask26;
  m[1] >>= 26;

  x[4] = m[1]; // 24 bits in x[4]

  return x;
}

fn pack(reg u64 y, reg u64[5] x)
{
  reg u64 t, t1;

  t = x[0];
  //t &= mask26;
  t1 = x[1];
  //t1 &= mask26;
  t1 <<= 26;
  t |= t1;
  t1 = x[2];
  //t1 &= mask26;
  t1 <<= 52;
  t |= t1;

  [y + 0*8] = t;

  t = x[2];
  t &= mask26;
  t >>= 12;
  t1 = x[3];
  //t1 &= mask26;
  t1 <<= 14; 
  t |= t1;
  t1 = x[4];
  //t1 &= mask26;
  t1 <<= 40;
  t |= t1;

  [y + 1*8] = t;
}

fn load_4x(reg u64 in) -> reg u64[5], reg u64[5], reg u64[5], reg u64[5], reg u64 {
       reg u64[5] x0,x1,x2,x3;
       x0 = load(in); in += 16;
       x1 = load(in); in += 16;
       x2 = load(in); in += 16;
       x3 = load(in); in += 16;
       return x0,x1,x2,x3,in;
}

fn add_4x(reg u64[5] h0,reg u64[5] h1,reg u64[5] h2,reg u64[5] h3,reg u64[5] x0,reg u64[5] x1,reg u64[5] x2,reg u64[5] x3) -> reg u64[5], reg u64[5], reg u64[5], reg u64[5] {
       h0 = add(h0,x0);
       h1 = add(h1,x1);
       h2 = add(h2,x2);
       h3 = add(h3,x3);
       return h0,h1,h2,h3;
}

fn mulmod_4x(reg u64[5] h0,reg u64[5] h1,reg u64[5] h2,reg u64[5] h3,reg u64[5] r4,reg u64[5] r3,reg u64[5] r2,reg u64[5] r,reg u64[4] r4x5,reg u64[4] r3x5,reg u64[4] r2x5,reg u64[4] rx5) -> reg u64[5], reg u64[5], reg u64[5], reg u64[5] {
       h0 = mulmod(h0,r4,r4x5);
       h1 = mulmod(h1,r3,r3x5);
       h2 = mulmod(h2,r2,r2x5);
       h3 = mulmod(h3,r,rx5);
       return h0,h1,h2,h3;
}

fn carry_reduce_4x(reg u64[5] h0,reg u64[5] h1,reg u64[5] h2,reg u64[5] h3) -> reg u64[5], reg u64[5], reg u64[5], reg u64[5] {
       h0 = carry_reduce(h0);
       h1 = carry_reduce(h1);
       h2 = carry_reduce(h2);
       h3 = carry_reduce(h3);
       return h0,h1,h2,h3;
}

fn add4(reg u64[5] h0,reg u64[5] h1,reg u64[5] h2,reg u64[5] h3) -> reg u64[5] {
       reg u64[5] h, ha, hb;
       ha = add(h0,h1);
       hb = add(h2,h3);
       h = add(ha,hb);
       return h;
}

export fn poly1305(reg u64 out, reg u64 in, reg u64 inlen, reg u64 k)
{
  inline int i;

  reg u64[5] r, r2, r3, r4, s, h, x,x0,x1,x2,x3,h0,h1,h2,h3;
  reg u64 b16, b64;

  reg u64[4] rx5, r4x5, r3x5, r2x5;

  // load r
  r = clamp(k);
  for i=0 to 4 { rx5[i] = r[i+1] * 5; }

  // initialize the accumulator ( only needed if b64 = 0 )
  for i=0 to 5 { h[i] = 0; }

  // calculate the number of blocks of 64 bytes  => number of complete 4-block packs
  b64 = inlen;
  b64 >>= 6;

  if(b64 > 1) // there should be at least 2 blocks of 64 bytes
  {
    inlen = inlen & 63;
    b64 -= 2;

    // precomputed values
    r2 = r;
    r2 = mulmod(r2, r, rx5);
    r2 = carry_reduce(r2);
    for i=0 to 4 { r2x5[i] = r2[i+1] * 5; }

    r3 = r2;
    r3 = mulmod(r3, r, rx5);
    r3 = carry_reduce(r3);

    r4 = r2;
    r4 = mulmod(r4, r2, r2x5);
    r4 = carry_reduce(r4);

    for i=0 to 4 { r4x5[i] = r4[i+1] * 5; }
    for i=0 to 4 { r3x5[i] = r3[i+1] * 5; }
    
    // first block of 64 bytes
    x0,x1,x2,x3,in = load_4x(in);
    h0,h1,h2,h3 = mulmod_4x(x0,x1,x2,x3,r4,r4,r4,r4,r4x5,r4x5,r4x5,r4x5);
    h0,h1,h2,h3 = carry_reduce_4x(h0,h1,h2,h3);

    // middle 64 byte blocks
    while(b64 > 0)
    {
       x0,x1,x2,x3,in = load_4x(in);
       h0,h1,h2,h3 = add_4x(h0,h1,h2,h3,x0,x1,x2,x3);
       h0,h1,h2,h3 = mulmod_4x(h0,h1,h2,h3,r4,r4,r4,r4,r4x5,r4x5,r4x5,r4x5);
       h0,h1,h2,h3 = carry_reduce_4x(h0,h1,h2,h3);
       b64 -= 1;
    }

    // last 64 byte block
    x0,x1,x2,x3,in = load_4x(in);
    h0,h1,h2,h3 = add_4x(h0,h1,h2,h3,x0,x1,x2,x3);
    h0,h1,h2,h3 = mulmod_4x(h0,h1,h2,h3,r4,r3,r2,r,r4x5,r3x5,r2x5,rx5);
    h0,h1,h2,h3 = carry_reduce_4x(h0,h1,h2,h3);

    h = add4(h0,h1,h2,h3);
    h = carry_reduce(h);
  }

  b16 = inlen;
  b16 >>= 4;

  while (b16 > 0)
  { 
    b16 -= 1;
    x = load(in);
    in += 16;
    h = add(h, x);
    h = mulmod(h, r, rx5);
    h = carry_reduce(h);
  }

  inlen &= 0xf;

  if(inlen != 0)
  {
    x = load_last(in, inlen);
    h = add(h, x);
    h = mulmod(h, r, rx5);
    h = carry_reduce(h);
  }

  h = freeze(h);

  k += 16;

  s = unpack(k);
  h = add_carry(h, s);
  pack(out, h);
}

